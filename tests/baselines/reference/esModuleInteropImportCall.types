=== tests/cases/compiler/foo.d.ts ===
declare function foo(): void;
>foo : () => void

declare namespace foo {}
export = foo;
>foo : () => void

=== tests/cases/compiler/index.ts ===
import("./foo").then(f => {
>import("./foo").then(f => {    f.default;}) : Promise<void>
>import("./foo").then : <TResult1 = { default: () => void; }, TResult2 = never>(onfulfilled?: (value: { default: () => void; }) => TResult1, onrejected?: (reason: any) => TResult2) => Promise<(TResult1 extends undefined ? TResult1 : TResult1 extends PromiseLike<infer UResult1> ? UResult1 : TResult1) | (TResult2 extends undefined ? TResult2 : TResult2 extends PromiseLike<infer UResult2> ? UResult2 : TResult2)>
>import("./foo") : Promise<{ default: () => void; }>
>"./foo" : "./foo"
>then : <TResult1 = { default: () => void; }, TResult2 = never>(onfulfilled?: (value: { default: () => void; }) => TResult1, onrejected?: (reason: any) => TResult2) => Promise<(TResult1 extends undefined ? TResult1 : TResult1 extends PromiseLike<infer UResult1> ? UResult1 : TResult1) | (TResult2 extends undefined ? TResult2 : TResult2 extends PromiseLike<infer UResult2> ? UResult2 : TResult2)>
>f => {    f.default;} : (f: { default: () => void; }) => void
>f : { default: () => void; }

    f.default;
>f.default : () => void
>f : { default: () => void; }
>default : () => void

});
