=== tests/cases/compiler/arrayConcat2.ts ===
var a: string[] = [];
>a : string[]
>[] : never[]

a.concat("hello", 'world');
>a.concat("hello", 'world') : string[]
>a.concat : { (...items: ConcatArray<string>[]): string[]; <U extends any[]>(...items: U): (string | ConcatFlatten<U[number]>)[]; }
>a : string[]
>concat : { (...items: ConcatArray<string>[]): string[]; <U extends any[]>(...items: U): (string | ConcatFlatten<U[number]>)[]; }
>"hello" : "hello"
>'world' : "world"

a.concat('Hello');
>a.concat('Hello') : string[]
>a.concat : { (...items: ConcatArray<string>[]): string[]; <U extends any[]>(...items: U): (string | ConcatFlatten<U[number]>)[]; }
>a : string[]
>concat : { (...items: ConcatArray<string>[]): string[]; <U extends any[]>(...items: U): (string | ConcatFlatten<U[number]>)[]; }
>'Hello' : "Hello"

var b = new Array<string>();
>b : string[]
>new Array<string>() : string[]
>Array : ArrayConstructor

b.concat('hello');
>b.concat('hello') : string[]
>b.concat : { (...items: ConcatArray<string>[]): string[]; <U extends any[]>(...items: U): (string | ConcatFlatten<U[number]>)[]; }
>b : string[]
>concat : { (...items: ConcatArray<string>[]): string[]; <U extends any[]>(...items: U): (string | ConcatFlatten<U[number]>)[]; }
>'hello' : "hello"

const expected: undefined = undefined as ConcatFlatten<undefined>;
>expected : undefined
>undefined as ConcatFlatten<undefined> : undefined
>undefined : undefined

// #19535

const [x] = (undefined as unknown as number[][]).concat([1]);
>x : number | number[]
>(undefined as unknown as number[][]).concat([1]) : (number | number[])[]
>(undefined as unknown as number[][]).concat : { (...items: ConcatArray<number[]>[]): number[][]; <U extends any[]>(...items: U): (number[] | ConcatFlatten<U[number]>)[]; }
>(undefined as unknown as number[][]) : number[][]
>undefined as unknown as number[][] : number[][]
>undefined as unknown : unknown
>undefined : undefined
>concat : { (...items: ConcatArray<number[]>[]): number[][]; <U extends any[]>(...items: U): (number[] | ConcatFlatten<U[number]>)[]; }
>[1] : number[]
>1 : 1

x == 1;
>x == 1 : boolean
>x : number | number[]
>1 : 1

// #26378

[1].concat(['']);
>[1].concat(['']) : (string | number)[]
>[1].concat : { (...items: ConcatArray<number>[]): number[]; <U extends any[]>(...items: U): (number | ConcatFlatten<U[number]>)[]; }
>[1] : number[]
>1 : 1
>concat : { (...items: ConcatArray<number>[]): number[]; <U extends any[]>(...items: U): (number | ConcatFlatten<U[number]>)[]; }
>[''] : string[]
>'' : ""

// #26976

[].concat([1]);
>[].concat([1]) : number[]
>[].concat : { (...items: ConcatArray<never>[]): never[]; <U extends any[]>(...items: U): ConcatFlatten<U[number]>[]; }
>[] : never[]
>concat : { (...items: ConcatArray<never>[]): never[]; <U extends any[]>(...items: U): ConcatFlatten<U[number]>[]; }
>[1] : number[]
>1 : 1

