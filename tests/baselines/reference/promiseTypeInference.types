=== tests/cases/compiler/promiseTypeInference.ts ===
declare class Promise<T> {
>Promise : Promise<T>

    then<U>(success?: (value: T) => Promise<U>): Promise<U>;
>then : { <TResult1 = T, TResult2 = never>(onfulfilled?: (value: T) => TResult1, onrejected?: (reason: any) => TResult2): Promise<(TResult1 extends undefined ? TResult1 : TResult1 extends PromiseLike<infer UResult1> ? UResult1 : TResult1) | (TResult2 extends undefined ? TResult2 : TResult2 extends PromiseLike<infer UResult2> ? UResult2 : TResult2)>; <U>(success?: (value: T) => Promise<U>): Promise<U>; }
>success : (value: T) => Promise<U>
>value : T
}
interface IPromise<T> {
    then<U>(success?: (value: T) => IPromise<U>): IPromise<U>;
>then : <U>(success?: (value: T) => IPromise<U>) => IPromise<U>
>success : (value: T) => IPromise<U>
>value : T
}
declare function load(name: string): Promise<string>;
>load : (name: string) => Promise<string>
>name : string

declare function convert(s: string): IPromise<number>;
>convert : (s: string) => IPromise<number>
>s : string

var $$x = load("something").then(s => convert(s));
>$$x : Promise<IPromise<number>>
>load("something").then(s => convert(s)) : Promise<IPromise<number>>
>load("something").then : { <TResult1 = string, TResult2 = never>(onfulfilled?: (value: string) => TResult1, onrejected?: (reason: any) => TResult2): Promise<(TResult1 extends undefined ? TResult1 : TResult1 extends PromiseLike<infer UResult1> ? UResult1 : TResult1) | (TResult2 extends undefined ? TResult2 : TResult2 extends PromiseLike<infer UResult2> ? UResult2 : TResult2)>; <U>(success?: (value: string) => Promise<U>): Promise<U>; }
>load("something") : Promise<string>
>load : (name: string) => Promise<string>
>"something" : "something"
>then : { <TResult1 = string, TResult2 = never>(onfulfilled?: (value: string) => TResult1, onrejected?: (reason: any) => TResult2): Promise<(TResult1 extends undefined ? TResult1 : TResult1 extends PromiseLike<infer UResult1> ? UResult1 : TResult1) | (TResult2 extends undefined ? TResult2 : TResult2 extends PromiseLike<infer UResult2> ? UResult2 : TResult2)>; <U>(success?: (value: string) => Promise<U>): Promise<U>; }
>s => convert(s) : (s: string) => IPromise<number>
>s : string
>convert(s) : IPromise<number>
>convert : (s: string) => IPromise<number>
>s : string

