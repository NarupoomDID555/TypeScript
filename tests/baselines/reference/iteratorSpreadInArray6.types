=== tests/cases/conformance/es6/spread/iteratorSpreadInArray6.ts ===
class SymbolIterator {
>SymbolIterator : SymbolIterator

    next() {
>next : () => { value: symbol; done: boolean; }

        return {
>{            value: Symbol(),            done: false        } : { value: symbol; done: boolean; }

            value: Symbol(),
>value : symbol
>Symbol() : symbol
>Symbol : SymbolConstructor

            done: false
>done : boolean
>false : false

        };
    }

    [Symbol.iterator]() {
>[Symbol.iterator] : () => this
>Symbol.iterator : symbol
>Symbol : SymbolConstructor
>iterator : symbol

        return this;
>this : this
    }
}

var array: number[] = [0, 1];
>array : number[]
>[0, 1] : number[]
>0 : 0
>1 : 1

array.concat([...new SymbolIterator]);
>array.concat([...new SymbolIterator]) : (number | symbol)[]
>array.concat : { (...items: ConcatArray<number>[]): number[]; <U extends any[]>(...items: U): (number | ConcatFlatten<U[number]>)[]; }
>array : number[]
>concat : { (...items: ConcatArray<number>[]): number[]; <U extends any[]>(...items: U): (number | ConcatFlatten<U[number]>)[]; }
>[...new SymbolIterator] : symbol[]
>...new SymbolIterator : symbol
>new SymbolIterator : SymbolIterator
>SymbolIterator : typeof SymbolIterator

