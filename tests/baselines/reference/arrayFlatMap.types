=== tests/cases/compiler/arrayFlatMap.ts ===
const array: number[] = [];
>array : number[]
>[] : undefined[]

const readonlyArray: ReadonlyArray<number> = [];
>readonlyArray : readonly number[]
>[] : undefined[]

array.flatMap((): ReadonlyArray<number> => []); // ok
>array.flatMap((): ReadonlyArray<number> => []) : number[]
>array.flatMap : <U>(callbackfn: (value: number, index: number, array: number[]) => U, thisArg?: any) => Flatten<U>[]
>array : number[]
>flatMap : <U>(callbackfn: (value: number, index: number, array: number[]) => U, thisArg?: any) => Flatten<U>[]
>(): ReadonlyArray<number> => [] : () => readonly number[]
>[] : undefined[]

readonlyArray.flatMap((): ReadonlyArray<number> => []); // ok
>readonlyArray.flatMap((): ReadonlyArray<number> => []) : number[]
>readonlyArray.flatMap : <U>(callbackfn: (value: number, index: number, array: readonly number[]) => U, thisArg?: any) => Flatten<U>[]
>readonlyArray : readonly number[]
>flatMap : <U>(callbackfn: (value: number, index: number, array: readonly number[]) => U, thisArg?: any) => Flatten<U>[]
>(): ReadonlyArray<number> => [] : () => readonly number[]
>[] : undefined[]

// #19535

const [x] = [1].flatMap(undefined as () => number[] | number[][]);
>x : number | number[]
>[1].flatMap(undefined as () => number[] | number[][]) : (number | number[])[]
>[1].flatMap : <U>(callbackfn: (value: number, index: number, array: number[]) => U, thisArg?: any) => Flatten<U>[]
>[1] : number[]
>1 : 1
>flatMap : <U>(callbackfn: (value: number, index: number, array: number[]) => U, thisArg?: any) => Flatten<U>[]
>undefined as () => number[] | number[][] : () => number[] | number[][]
>undefined : undefined

x == 1;
>x == 1 : boolean
>x : number | number[]
>1 : 1

